"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["174"],{9358:function(e,n,t){t.r(n);var a=t(5893),r=t(65);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",pre:"pre"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"getdeltabypath",children:["getDeltaByPath",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getdeltabypath",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"getDeltaByPath"})," method is a tool of ",(0,a.jsx)(n.a,{href:"https://github.com/benjamine/jsondiffpatch/tree/master",target:"_blank",rel:"noopener noreferrer",children:"jsondiffpatch"})," utility designed to extract a specific delta (change set) from a larger delta object representing differences between two JSON objects. This method is useful for retrieving precise change information at a given path within the JSON structure."]}),"\n",(0,a.jsxs)(n.h2,{id:"delta-types",children:["Delta Types",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#delta-types",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AddedDelta"}),": Represents an added value."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ModifiedDelta"}),": Represents a change from one value to another."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"DeletedDelta"}),": Represents a deleted value."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ObjectDelta"}),": A complex object structure representing changes in a nested JSON object."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ArrayDelta"}),": Represents changes in an array, including additions, deletions, and modifications."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MovedDelta"}),": Represents a moved value within an array."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"TextDiffDelta"}),": Represents a textual difference."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"function-signature",children:["Function Signature",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-signature",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const getDeltaByPath: (delta: Delta, path: string | string[]) => Delta\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"parameters",children:["Parameters",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"delta"}),": The root delta object from which changes are extracted."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path"}),": The path to the specific change within the delta object. It can be a string or an array of strings representing the path to the desired change."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"return-value",children:["Return Value",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Returns a Delta object representing the change at the specified path. If no change exists at that path or the path is invalid, the function returns undefined."}),"\n",(0,a.jsxs)(n.h2,{id:"usage",children:["Usage",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"getDeltaByPath"})," function, you need to pass the complete delta object and the path to the specific change you want to retrieve. The path can be a dot-separated string (e.g., ",(0,a.jsx)(n.code,{children:'"user.name"'}),") or an array of strings representing the keys and indexes in the path (e.g., ",(0,a.jsx)(n.code,{children:'["user", "name"]'}),")."]}),"\n",(0,a.jsxs)(n.h2,{id:"example",children:["Example",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import * as jsondiffpatch from 'jsondiffpatch';\nimport { getDeltaByPath } from 'jsoncargo';\n\nconst country = {\n  name: 'Argentina',\n  capital: 'Buenos Aires',\n  independence: new Date(1816, 6, 9),\n  unasur: true,\n};\n\nconst country2 = JSON.parse(JSON.stringify(country), jsondiffpatch.dateReviver);\n\n// make some changes\ncountry2.name = 'Republica Argentina';\ncountry2.population = 41324992;\ndelete country2.capital;\n\nconst delta = jsondiffpatch.diff(country, country2);\n\nconsole.log(getDeltaByPath(delta, 'name'));         // ['Argentina', 'Republica Argentina']\nconsole.log(getDeltaByPath(delta, 'population'));   //  [41324992]\nconsole.log(getDeltaByPath(delta, 'capital'));      // ['Buenos Aires', 0, 0]\nconsole.log(getDeltaByPath(delta, 'independence')); // undefined\nconsole.log(getDeltaByPath(delta, 'unasur'));       // undefined\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"notes",children:["Notes",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#notes",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The function handles different types of deltas and navigates through the nested structure based on the provided path."}),"\n",(0,a.jsxs)(n.li,{children:["For ",(0,a.jsx)(n.code,{children:"ArrayDelta"})," and ",(0,a.jsx)(n.code,{children:"ObjectDelta"}),", the function recursively searches for the specified path."]}),"\n",(0,a.jsxs)(n.li,{children:["For simple deltas like ",(0,a.jsx)(n.code,{children:"AddedDelta"}),", ",(0,a.jsx)(n.code,{children:"ModifiedDelta"}),", and ",(0,a.jsx)(n.code,{children:"DeletedDelta"}),", it directly returns the corresponding change if it matches the path."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"conclusion",children:["Conclusion",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#conclusion",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"getDeltaByPath"})," method is a powerful tool for navigating complex delta objects and extracting specific changes, making it easier to understand and handle the differences between JSON objects in a fine-grained manner."]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}n.default=i,i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["api%2FgetDeltaByPath.md"]={toc:[{text:"Delta Types",id:"delta-types",depth:2},{text:"Function Signature",id:"function-signature",depth:2},{text:"Parameters",id:"parameters",depth:2},{text:"Return Value",id:"return-value",depth:2},{text:"Usage",id:"usage",depth:2},{text:"Example",id:"example",depth:2},{text:"Notes",id:"notes",depth:2},{text:"Conclusion",id:"conclusion",depth:2}],title:"getDeltaByPath",frontmatter:{pageType:"doc"}}}}]);
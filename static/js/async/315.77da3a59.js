"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["315"],{516:function(e,n,r){r.r(n);var a=r(5893),t=r(65);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",ul:"ul",li:"li",pre:"pre"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"jsonmergepatch",children:["jsonMergePatch",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsonmergepatch",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["An implementation of the JSON Merge Patch ",(0,a.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7396",target:"_blank",rel:"noopener noreferrer",children:"RFC 7396"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"JSON Merge Patch (RFC 7396) is a standard format that allows you to update a JSON document by sending the changes rather than the whole document. JSON Merge Patch plays well with the HTTP PATCH verb (method) and REST style programming."}),"\n",(0,a.jsxs)(n.p,{children:["There are three functions (",(0,a.jsx)(n.code,{children:"merge"}),", ",(0,a.jsx)(n.code,{children:"apply"}),", and ",(0,a.jsx)(n.code,{children:"generate"}),") for manipulating JSON objects. These functions are used for applying patches to JSON objects, merging JSON objects, and generating patches based on differences between JSON objects."]}),"\n",(0,a.jsxs)(n.h2,{id:"jsonmergepatchmerge",children:[(0,a.jsx)(n.code,{children:"jsonMergePatch.merge"}),(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsonmergepatchmerge",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Merges a patch JSON object into an original JSON object. If either the original or the patch is not a valid JSON object, it returns a deep clone of the patch."}),"\n",(0,a.jsxs)(n.h3,{id:"types",children:["Types",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Json"}),": Represents any valid JSON value."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"function-signature",children:["Function Signature",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-signature",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const merge: (original: Json, patch: Json) => Json\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"parameters",children:["Parameters",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"original"}),": The original JSON object to be merged."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"patch"}),": The patch JSON object to merge into the original."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"return-value",children:["Return Value",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Returns the ",(0,a.jsx)(n.code,{children:"Json"})," object that is the merged result."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"usage",children:["Usage",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { jsonMergePatch } from 'jsoncargo';\n\nconst original = { a: 1, b: 2 };\nconst patch1 = { b: 3, c: 4 };\nconst patch2 = { a: null };\n\nconst result1 = jsonMergePatch.merge(original, patch1);\nconsole.log(result1); // Output: { a: 1, b: 3, c: 4 }\n\nconst result2 = jsonMergePatch.merge(result1, patch2);\nconsole.log(result2); // Output: { b: 3, c: 4 }\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"jsonmergepatchapply",children:[(0,a.jsx)(n.code,{children:"jsonMergePatch.apply"}),(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsonmergepatchapply",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Applies a patch to a target JSON object. If the patch or the target is not a valid JSON object, the target is replaced with a deep clone of the patch."}),"\n",(0,a.jsxs)(n.h3,{id:"types-1",children:["Types",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types-1",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Json"}),": Represents any valid JSON value."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"function-signature-1",children:["Function Signature",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-signature-1",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const apply: (target: Json, patch: Json) => Json\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"parameters-1",children:["Parameters",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters-1",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"target"}),": The target JSON object to which the patch will be applied."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"patch"}),": The patch JSON object to apply to the target."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"return-value-1",children:["Return Value",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value-1",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Return the updated JSON object after applying the patch."}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"usage-1",children:["Usage",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage-1",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { jsonMergePatch } from 'jsoncargo';\n\nconst target = { a: 1, b: 2 };\nconst patch = { b: null, c: 3 };\n\nconst result = jsonMergePatch.apply(target, patch);\n\nconsole.log(target); // Output: { a: 1, c: 3 }\nconsole.log(result); // Output: { a: 1, c: 3 }\nconsole.log(target === result); // Output: true\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"jsonmergepatchgenerate",children:[(0,a.jsx)(n.code,{children:"jsonMergePatch.generate"}),(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsonmergepatchgenerate",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Generates a patch JSON object that represents the differences between the original and result JSON objects. If either the original or the result is not a valid JSON object, it returns a deep clone of the result."}),"\n",(0,a.jsxs)(n.h3,{id:"types-2",children:["Types",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types-2",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Json"}),": Represents any valid JSON value."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"function-signature-2",children:["Function Signature",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-signature-2",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const generate: (original: Json, result: Json) => Json\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"parameters-2",children:["Parameters",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters-2",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"original"}),": The original JSON object."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"result"}),": The resulting JSON object to compare with the original."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"return-value-2",children:["Return Value",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value-2",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Return the generated patch JSON object."}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"usage-2",children:["Usage",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage-2",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { jsonMergePatch } from 'jsoncargo';\n\nconst original = { a: 1, b: 2 };\nconst result = { a: 1, c: 3 };\n\nconst patch = jsonMergePatch.generate(original, result);\n\nconsole.log(patch); // Output: { b: null, c: 3 }\n"})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}n.default=h,h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["api%2FjsonMergePatch.md"]={toc:[{text:"`jsonMergePatch.merge`",id:"jsonmergepatchmerge",depth:2},{text:"Types",id:"types",depth:3},{text:"Function Signature",id:"function-signature",depth:3},{text:"Parameters",id:"parameters",depth:3},{text:"Return Value",id:"return-value",depth:3},{text:"Usage",id:"usage",depth:3},{text:"`jsonMergePatch.apply`",id:"jsonmergepatchapply",depth:2},{text:"Types",id:"types-1",depth:3},{text:"Function Signature",id:"function-signature-1",depth:3},{text:"Parameters",id:"parameters-1",depth:3},{text:"Return Value",id:"return-value-1",depth:3},{text:"Usage",id:"usage-1",depth:3},{text:"`jsonMergePatch.generate`",id:"jsonmergepatchgenerate",depth:2},{text:"Types",id:"types-2",depth:3},{text:"Function Signature",id:"function-signature-2",depth:3},{text:"Parameters",id:"parameters-2",depth:3},{text:"Return Value",id:"return-value-2",depth:3},{text:"Usage",id:"usage-2",depth:3}],title:"jsonMergePatch",frontmatter:{pageType:"doc"}}}}]);
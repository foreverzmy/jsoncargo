"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["58"],{8397:function(e,n,r){r.r(n);var t=r(5893),s=r(65);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"threewaymerge",children:["threeWayMerge",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#threewaymerge",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"threeWayMerge"})," function performs a three-way merge on two JSON objects (",(0,t.jsx)(n.code,{children:"left"})," and ",(0,t.jsx)(n.code,{children:"right"}),") with a common ancestor (",(0,t.jsx)(n.code,{children:"base"}),"). It identifies and resolves conflicts between the changes made in the ",(0,t.jsx)(n.code,{children:"left"})," and ",(0,t.jsx)(n.code,{children:"right"})," JSON objects. If conflicts are detected, the method returns the conflict paths; otherwise, it merges the changes and returns the resulting JSON object."]}),"\n",(0,t.jsxs)(n.h2,{id:"types",children:["Types",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"pathtype",children:["PathType",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pathtype",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"PathType"})," type represents the path to a value within a JSON object or array. It can be either a string (for object keys) or a number (for array indices). This type is used to specify the location of conflicts within the JSON structure."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type PathType = string | number;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"patch-options",children:["Patch Options",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#patch-options",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"patchOptions"})," object is used to configure the merge behavior for arrays. In this example, ",(0,t.jsx)(n.code,{children:"deepPatch"})," is set to ",(0,t.jsx)(n.code,{children:"true"})," to enable deep patching for arrays."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const patchOptions = { arrays: { deepPatch: true } };\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"function-signature",children:["Function Signature",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-signature",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const threeWayMerge: (base: Json, left: Json, right: Json) => ThreeWayMergeResult;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"parameters",children:["Parameters",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"base"})," (",(0,t.jsx)(n.code,{children:"Json"}),"): The common ancestor JSON object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"left"})," (",(0,t.jsx)(n.code,{children:"Json"}),"): The first JSON object with changes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"right"})," (",(0,t.jsx)(n.code,{children:"Json"}),"): The second JSON object with changes."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"return-value",children:["Return Value",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["The method returns a ",(0,t.jsx)(n.code,{children:"ThreeWayMergeResult"})," object:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conflict"})," (",(0,t.jsx)(n.code,{children:"boolean"}),"): Indicates if there are conflicts."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"result"})," (",(0,t.jsx)(n.code,{children:"Json"})," | ",(0,t.jsx)(n.code,{children:"null"}),"): The merged JSON object if no conflicts are found, otherwise ",(0,t.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conflicts"})," (",(0,t.jsx)(n.code,{children:"PathType[][]"}),"): An array of conflict paths if conflicts are found."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"usage",children:["Usage",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { threeWayMerge } from 'jsoncargo';\n\nconst base = { a: 1, b: 2 };\nconst left = { a: 1, b: 3 };\nconst right = { a: 1, b: 4 };\n\nconst result = threeWayMerge(base, left, right);\n\nif (result.conflict) {\n  console.log('Conflicts found:', result.conflicts);\n} else {\n  console.log('Merged result:', result.result);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"threeWayMerge"})," function helps to merge changes from two JSON objects with a common ancestor. It generates patches for both the ",(0,t.jsx)(n.code,{children:"left"})," and ",(0,t.jsx)(n.code,{children:"right"})," JSON objects based on the ",(0,t.jsx)(n.code,{children:"base"}),", identifies any conflicts between these patches, and merges them if no conflicts are found. The function returns a result indicating whether conflicts were found and, if not, the merged JSON object."]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}n.default=h,h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["api%2FthreeWayMerge.md"]={toc:[{text:"Types",id:"types",depth:2},{text:"PathType",id:"pathtype",depth:3},{text:"Patch Options",id:"patch-options",depth:3},{text:"Function Signature",id:"function-signature",depth:2},{text:"Parameters",id:"parameters",depth:3},{text:"Return Value",id:"return-value",depth:3},{text:"Usage",id:"usage",depth:2}],title:"threeWayMerge",frontmatter:{pageType:"doc"}}}}]);
"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["322"],{8031:function(e,t,n){n.r(t);var a=n(5893),s=n(65);function r(e){let t=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.h1,{id:"getdeltatype",children:["getDeltaType",(0,a.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#getdeltatype",children:"#"})]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"getDeltaType"})," method is a tool of ",(0,a.jsx)(t.a,{href:"https://github.com/benjamine/jsondiffpatch/tree/master",target:"_blank",rel:"noopener noreferrer",children:"jsondiffpatch"})," that generates a delta object representing the difference between two JSON values. This method analyzes a delta object to determine the type of change it represents. The delta types include added, deleted, modified, unchanged, and unknown."]}),"\n",(0,a.jsxs)(t.h2,{id:"function-signature",children:["Function Signature",(0,a.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#function-signature",children:"#"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const getDeltaType: (delta: Delta, path?: string | string[], options?: GetDeltaTypeOptions) => DELTA_TYPE\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"parameters",children:["Parameters",(0,a.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"delta"}),": The delta object to inspect."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"}),": An optional path (string or array of strings) to a specific part of the delta object."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"options"}),": An optional object with the following properties:","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"deep"}),": A boolean indicating whether to inspect deeply into nested objects and arrays."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.h2,{id:"return-value",children:["Return Value",(0,a.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value",children:"#"})]}),"\n",(0,a.jsxs)(t.p,{children:["The function returns a value from the ",(0,a.jsx)(t.code,{children:"DELTA_TYPE"})," enum, indicating the type of change detected:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"export enum DELTA_TYPE {\n  ADDED = 'added',\n  DELETED = 'deleted',\n  MODIFIED = 'modified',\n  UNCHANGED = 'unchanged',\n  UNKNOWN = 'unknown',\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"usage",children:["Usage",(0,a.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { type DELTA_TYPE, type Delta, getDeltaType } from 'jsoncargo';\n\nconst delta: Delta = // your delta object here;\nconst path: string | string[] = // optional path to inspect within the delta;\n\nconst options = {\n  deep: true // optional, set to true to inspect deeply in the object structure\n};\n\nconst type = getDeltaType(delta, path, options);\nconsole.log(type); // outputs the DELTA_TYPE of the change at the specified path\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"notes",children:["Notes",(0,a.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#notes",children:"#"})]}),"\n",(0,a.jsx)(t.p,{children:"The method handles different structures of delta objects, including arrays and objects, and interprets them according to the specified path and options."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"deep"})," option allows for detailed inspection of nested structures within the delta object, providing flexibility in how changes are detected and classified."]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}t.default=i,i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["api%2FgetDeltaType.md"]={toc:[{text:"Function Signature",id:"function-signature",depth:2},{text:"Parameters",id:"parameters",depth:2},{text:"Return Value",id:"return-value",depth:2},{text:"Usage",id:"usage",depth:2},{text:"Notes",id:"notes",depth:2}],title:"getDeltaType",frontmatter:{pageType:"doc"}}}}]);